/*
 * This file is generated by jOOQ.
 */
package ee.rabi.ali.api.account.orm.model.tables;


import ee.rabi.ali.api.account.orm.model.Indexes;
import ee.rabi.ali.api.account.orm.model.Keys;
import ee.rabi.ali.api.account.orm.model.Public;
import ee.rabi.ali.api.account.orm.model.tables.records.LedgerRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Ledger extends TableImpl<LedgerRecord> {

    private static final long serialVersionUID = 1230503714;

    /**
     * The reference instance of <code>PUBLIC.LEDGER</code>
     */
    public static final Ledger LEDGER = new Ledger();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LedgerRecord> getRecordType() {
        return LedgerRecord.class;
    }

    /**
     * The column <code>PUBLIC.LEDGER.ID</code>.
     */
    public final TableField<LedgerRecord, String> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.LEDGER.ACCOUNT_ID</code>.
     */
    public final TableField<LedgerRecord, String> ACCOUNT_ID = createField(DSL.name("ACCOUNT_ID"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.LEDGER.TRANSACTION_ID</code>.
     */
    public final TableField<LedgerRecord, String> TRANSACTION_ID = createField(DSL.name("TRANSACTION_ID"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.LEDGER.AMOUNT</code>.
     */
    public final TableField<LedgerRecord, Long> AMOUNT = createField(DSL.name("AMOUNT"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.LEDGER.CREATED_AT</code>.
     */
    public final TableField<LedgerRecord, Timestamp> CREATED_AT = createField(DSL.name("CREATED_AT"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.LEDGER</code> table reference
     */
    public Ledger() {
        this(DSL.name("LEDGER"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.LEDGER</code> table reference
     */
    public Ledger(String alias) {
        this(DSL.name(alias), LEDGER);
    }

    /**
     * Create an aliased <code>PUBLIC.LEDGER</code> table reference
     */
    public Ledger(Name alias) {
        this(alias, LEDGER);
    }

    private Ledger(Name alias, Table<LedgerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ledger(Name alias, Table<LedgerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Ledger(Table<O> child, ForeignKey<O, LedgerRecord> key) {
        super(child, key, LEDGER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LEDGER_ACCOUNT_ID_FK_INDEX_8, Indexes.PRIMARY_KEY_8);
    }

    @Override
    public UniqueKey<LedgerRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    public List<UniqueKey<LedgerRecord>> getKeys() {
        return Arrays.<UniqueKey<LedgerRecord>>asList(Keys.CONSTRAINT_8);
    }

    @Override
    public Ledger as(String alias) {
        return new Ledger(DSL.name(alias), this);
    }

    @Override
    public Ledger as(Name alias) {
        return new Ledger(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ledger rename(String name) {
        return new Ledger(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ledger rename(Name name) {
        return new Ledger(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Long, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
