/*
 * This file is generated by jOOQ.
 */
package ee.rabi.ali.api.account.orm.model.tables;


import ee.rabi.ali.api.account.orm.model.Indexes;
import ee.rabi.ali.api.account.orm.model.Keys;
import ee.rabi.ali.api.account.orm.model.Public;
import ee.rabi.ali.api.account.orm.model.tables.records.TransferRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Transfer extends TableImpl<TransferRecord> {

    private static final long serialVersionUID = 829535512;

    /**
     * The reference instance of <code>PUBLIC.TRANSFER</code>
     */
    public static final Transfer TRANSFER = new Transfer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransferRecord> getRecordType() {
        return TransferRecord.class;
    }

    /**
     * The column <code>PUBLIC.TRANSFER.ID</code>.
     */
    public final TableField<TransferRecord, String> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.FROM_ACCOUNT_ID</code>.
     */
    public final TableField<TransferRecord, String> FROM_ACCOUNT_ID = createField(DSL.name("FROM_ACCOUNT_ID"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.TO_ACCOUNT_ID</code>.
     */
    public final TableField<TransferRecord, String> TO_ACCOUNT_ID = createField(DSL.name("TO_ACCOUNT_ID"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.IDEMPOTENCY_KEY</code>.
     */
    public final TableField<TransferRecord, String> IDEMPOTENCY_KEY = createField(DSL.name("IDEMPOTENCY_KEY"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.AMOUNT</code>.
     */
    public final TableField<TransferRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), org.jooq.impl.SQLDataType.DECIMAL.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TRANSFER.CREATED_AT</code>.
     */
    public final TableField<TransferRecord, Timestamp> CREATED_AT = createField(DSL.name("CREATED_AT"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer() {
        this(DSL.name("TRANSFER"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer(String alias) {
        this(DSL.name(alias), TRANSFER);
    }

    /**
     * Create an aliased <code>PUBLIC.TRANSFER</code> table reference
     */
    public Transfer(Name alias) {
        this(alias, TRANSFER);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transfer(Name alias, Table<TransferRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transfer(Table<O> child, ForeignKey<O, TransferRecord> key) {
        super(child, key, TRANSFER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_7, Indexes.PRIMARY_KEY_7, Indexes.TRANSFER_FROM_ACCOUNT_ID_FK_INDEX_7, Indexes.TRANSFER_TO_ACCOUNT_ID_FK_INDEX_7);
    }

    @Override
    public UniqueKey<TransferRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7A;
    }

    @Override
    public List<UniqueKey<TransferRecord>> getKeys() {
        return Arrays.<UniqueKey<TransferRecord>>asList(Keys.CONSTRAINT_7A, Keys.CONSTRAINT_7);
    }

    @Override
    public Transfer as(String alias) {
        return new Transfer(DSL.name(alias), this);
    }

    @Override
    public Transfer as(Name alias) {
        return new Transfer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(String name) {
        return new Transfer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfer rename(Name name) {
        return new Transfer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, BigDecimal, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
